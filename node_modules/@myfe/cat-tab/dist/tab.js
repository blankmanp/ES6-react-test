'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _catUtil = require('cat-util');

var _nav = require('./nav');

var _nav2 = _interopRequireDefault(_nav);

var _content = require('./content');

var _content2 = _interopRequireDefault(_content);

var Tab = (function (_Component) {
    _inherits(Tab, _Component);

    function Tab() {
        _classCallCheck(this, Tab);

        _get(Object.getPrototypeOf(Tab.prototype), 'constructor', this).apply(this, arguments);

        this.state = {
            liveKey: this.props.liveKey
        };
    }

    _createClass(Tab, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var liveKey = nextProps.liveKey;

            if (this.state.liveKey !== liveKey) {
                this.setState({
                    liveKey: liveKey
                });
            }
        }
    }, {
        key: 'handleSelect',
        value: function handleSelect(key) {
            this.setState({
                liveKey: key
            });
        }
    }, {
        key: '_renderNavs',
        value: function _renderNavs() {
            var self = this;

            return _react2['default'].Children.map(this.props.children, function (child) {
                return _react2['default'].cloneElement(child, {
                    liveKey: self.state.liveKey,
                    onClick: self.handleSelect.bind(self),
                    extraCallBack: self.props.onSelect
                });
            });
        }
    }, {
        key: '_renderContent',
        value: function _renderContent() {
            var self = this;

            if (!this.props.children[0].props.children) {
                return null;
            }

            return _react2['default'].createElement(
                'div',
                { className: this.props.prefixName + '-tab-content' },
                _react2['default'].Children.map(this.props.children, function (child) {
                    return _react2['default'].createElement(
                        _content2['default'],
                        {
                            liveKey: self.state.liveKey,
                            prefixName: self.props.prefixName,
                            eventKey: child.props.eventKey
                        },
                        child.props.children
                    );
                })
            );
        }
    }, {
        key: 'render',
        value: function render() {
            var _setClass;

            var _props = this.props;
            var prefixName = _props.prefixName;
            var myStyle = _props.myStyle;
            var stacked = _props.stacked;
            var justified = _props.justified;
            var classNames = (0, _catUtil.setClass)(prefixName + '-nav', prefixName + '-nav-' + myStyle, (_setClass = {}, _defineProperty(_setClass, prefixName + '-nav-stacked', stacked), _defineProperty(_setClass, prefixName + '-nav-justified', justified), _setClass));

            return _react2['default'].createElement(
                'div',
                { className: prefixName + '-tab-container' },
                _react2['default'].createElement(
                    'ul',
                    { className: classNames },
                    this._renderNavs()
                ),
                this._renderContent()
            );
        }
    }], [{
        key: 'propTypes',
        value: {
            liveKey: _react2['default'].PropTypes.string,
            prefixName: _react2['default'].PropTypes.string,
            myStyle: _react2['default'].PropTypes.string,

            stacked: _react2['default'].PropTypes.bool,
            justified: _react2['default'].PropTypes.bool
        },
        enumerable: true
    }, {
        key: 'defaultProps',
        value: {
            prefixName: 'cat',
            myStyle: 'tabs', //tabs/pills
            stacked: false,
            justified: false
        },
        enumerable: true
    }]);

    return Tab;
})(_react.Component);

Tab.Panel = _nav2['default'];

exports['default'] = Tab;
module.exports = exports['default'];