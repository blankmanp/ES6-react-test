'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _gridGridheadJs = require('./grid/gridhead.js');

var _gridGridheadJs2 = _interopRequireDefault(_gridGridheadJs);

var _gridGridbodyJs = require('./grid/gridbody.js');

var _gridGridbodyJs2 = _interopRequireDefault(_gridGridbodyJs);

var _navNavheaderJs = require('./nav/navheader.js');

var _navNavheaderJs2 = _interopRequireDefault(_navNavheaderJs);

var _navNavfooterJs = require('./nav/navfooter.js');

var _navNavfooterJs2 = _interopRequireDefault(_navNavfooterJs);

var Grid = (function (_Component) {
    _inherits(Grid, _Component);

    _createClass(Grid, null, [{
        key: 'propTypes',
        value: {
            columns: _react2['default'].PropTypes.array,
            rows: _react2['default'].PropTypes.array,
            offset: _react2['default'].PropTypes.number,
            total: _react2['default'].PropTypes.number,
            limit: _react2['default'].PropTypes.number,
            renderKey: _react2['default'].PropTypes.string,
            query: _react2['default'].PropTypes.object,

            enableSelection: _react2['default'].PropTypes.bool,
            filter: _react2['default'].PropTypes.bool,
            className: _react2['default'].PropTypes.string,
            heightControl: _react2['default'].PropTypes.string,
            prefixName: _react2['default'].PropTypes.string,
            TableStyle: _react2['default'].PropTypes.array,
            myHeadStyle: _react2['default'].PropTypes.string,
            batch: _react2['default'].PropTypes.array
        },
        enumerable: true
    }, {
        key: 'defaultProps',
        value: {
            columns: [],
            rows: [], // 列表生成器
            offset: -1,
            total: 0,
            limit: 1,
            renderKey: 'id',
            query: {},

            enableSelection: false, // 满足全选
            className: 'table-responsive', // 容器的类名
            heightControl: '',
            prefixName: 'cat', // 前缀
            TableStyle: ['bordered'], // triped, condensed
            myHeadStyle: 'active', // active, success, info, warning, danger
            batch: []
        },
        enumerable: true
    }]);

    function Grid(props) {
        var _this = this;

        _classCallCheck(this, Grid);

        _get(Object.getPrototypeOf(Grid.prototype), 'constructor', this).call(this, props);
        this.state = {
            selectAll: false,
            selected: [],
            filterName: {
                name: '',
                value: ''
            },
            data: [],
            orderFunc: {
                key: '',
                func: function func() {},
                forward: true
            }
        };

        this._handleSelect = function (value) {
            var _state = _this.state;
            var selectAll = _state.selectAll;
            var selected = _state.selected;
            var data = _state.data;
            var renderKey = _this.props.renderKey;

            if (value === '-1') {
                selectAll = !selectAll;
                if (selectAll) {
                    selected = _lodash2['default'].map(data, renderKey);
                } else {
                    selected = [];
                }
            } else {
                var index = _lodash2['default'].indexOf(selected, value);
                if (index < 0) {
                    selected.push(value);
                } else {
                    selected.splice(index, 1);
                }
                if (selected.length === data.length && selected.length !== 0) {
                    selectAll = true;
                } else {
                    selectAll = false;
                }
            }
            _this.setState({
                selectAll: selectAll,
                selected: selected
            });
        };

        this._updatePage = function (offset) {
            var _props = _this.props;
            var query = _props.query;
            var limit = _props.limit;

            _this.props.rerender(offset * limit, query);
        };

        this._updateFilter = function (filter, key) {
            var filterName = _this.state.filterName;
            var _props2 = _this.props;
            var rows = _props2.rows;
            var columns = _props2.columns;
            var data = [];
            filterName[key] = filter;
            data = _this._filterData(filterName, rows, columns);

            _this.setState({
                selectAll: false,
                selected: [],
                filterName: filterName,
                data: data
            });
        };

        this._filterData = function (filterName, rows, thead) {
            var self = _this;
            if (filterName.value === '') {
                return rows;
            }
            return _lodash2['default'].filter(rows, function (row) {
                if (filterName.name === '') {
                    return _lodash2['default'].some(thead, function (column) {
                        if (!column.name) {
                            return false;
                        }
                        return self._checkTd(filterName.value, row[column.name], column.renderer);
                    });
                } else {
                    var renderer = _lodash2['default'].pluck(_lodash2['default'].filter(thead, { name: filterName.name }), 'renderer')[0];
                    return self._checkTd(filterName.value, row[filterName.name], renderer);
                }
                return true;
            });
        };

        this._checkTd = function (value, tdValue, renderer) {
            tdValue = renderer !== undefined ? renderer(tdValue) : tdValue;
            if (tdValue.toString().indexOf(value) < 0) {
                return false;
            }
            return true;
        };

        this._updateOrder = function (orderFunc) {
            _this.setState({
                orderFunc: orderFunc
            });
        };
    }

    _createClass(Grid, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            this.setState({
                data: this.props.rows
            });
        }

        // 接收新数据
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            this.setState({
                selectAll: false,
                selected: [],
                filterName: {
                    name: '',
                    value: ''
                },
                data: nextProps.rows,
                orderFunc: {
                    key: '',
                    func: function func() {},
                    forward: true
                }
            });
        }

        // 选中处理
    }, {
        key: 'render',
        value: function render() {
            var _props3 = this.props;
            var columns = _props3.columns;
            var prefixName = _props3.prefixName;
            var className = _props3.className;
            var rows = _props3.rows;
            var offset = _props3.offset;
            var total = _props3.total;
            var enableSelection = _props3.enableSelection;
            var filter = _props3.filter;
            var heightControl = _props3.heightControl;
            var limit = _props3.limit;
            var renderKey = _props3.renderKey;
            var batch = _props3.batch;
            var TableStyle = _props3.TableStyle;
            var _state2 = this.state;
            var selectAll = _state2.selectAll;
            var selected = _state2.selected;
            var filterName = _state2.filterName;
            var data = _state2.data;
            var orderFunc = _state2.orderFunc;
            var divStyle = heightControl !== '' ? {
                maxHeight: heightControl + 'px'
            } : {};
            var tableClasses = (function (style) {
                var l = '';
                _lodash2['default'].each(style, function (item) {
                    l += ' ' + prefixName + '-table-' + item;
                });
                return l;
            })(TableStyle);
            var tableClassName = prefixName + '-table ' + prefixName + '-table-hover ' + tableClasses;

            var orderedData = data.slice();
            if (orderFunc.key !== '') {
                orderedData.sort(function (prev, next) {
                    var order = orderFunc.func(prev[orderFunc.key], next[orderFunc.key]);
                    return orderFunc.forward ? order : !order;
                });
            }

            return _react2['default'].createElement(
                'div',
                null,
                _react2['default'].createElement(_navNavheaderJs2['default'], {
                    prefixName: prefixName,
                    selected: selected,
                    columns: columns,
                    enableSelection: enableSelection,
                    filter: filter,
                    filterName: filterName,
                    updateFilter: this._updateFilter,
                    batch: batch
                }),
                _react2['default'].createElement(
                    'div',
                    {
                        className: prefixName + '-' + className,
                        style: divStyle
                    },
                    _react2['default'].createElement(
                        'table',
                        { className: tableClassName },
                        _react2['default'].createElement(_gridGridheadJs2['default'], {
                            columns: columns,
                            enableSelection: enableSelection,
                            selectAll: selectAll,
                            myStyle: this.props.myHeadStyle,
                            onSelect: this._handleSelect,
                            orderFunc: orderFunc,
                            updateOrder: this._updateOrder
                        }),
                        _react2['default'].createElement(_gridGridbodyJs2['default'], {
                            rows: orderedData,
                            columns: columns,
                            enableSelection: enableSelection,
                            renderKey: renderKey,
                            selected: selected,
                            onSelect: this._handleSelect,
                            filter: filter,
                            filterName: filterName
                        })
                    )
                ),
                _react2['default'].createElement(_navNavfooterJs2['default'], {
                    prefixName: prefixName,
                    offset: offset,
                    update: this._updatePage,
                    limit: limit,
                    number: rows.length,
                    total: total
                })
            );
        }
    }]);

    return Grid;
})(_react.Component);

exports['default'] = Grid;
;
module.exports = exports['default'];

// 分页处理
// 对外输出offset

// 筛选处理

// 筛选规则

// 判断单元格的筛选