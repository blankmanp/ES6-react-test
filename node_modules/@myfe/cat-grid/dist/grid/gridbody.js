'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _gridrowJs = require('./gridrow.js');

var _gridrowJs2 = _interopRequireDefault(_gridrowJs);

var GridBody = (function (_Component) {
    _inherits(GridBody, _Component);

    _createClass(GridBody, null, [{
        key: 'propTypes',
        value: {
            columns: _react2['default'].PropTypes.array,
            enableSelection: _react2['default'].PropTypes.bool,
            selectAll: _react2['default'].PropTypes.bool,
            renderKey: _react2['default'].PropTypes.string
        },
        enumerable: true
    }, {
        key: 'defaultProps',
        value: {
            columns: [],
            enableSelection: false,
            selectAll: false,
            renderKey: 'id'
        },
        enumerable: true
    }]);

    function GridBody(props) {
        _classCallCheck(this, GridBody);

        _get(Object.getPrototypeOf(GridBody.prototype), 'constructor', this).call(this, props);
    }

    _createClass(GridBody, [{
        key: 'render',
        value: function render() {
            var self = this;
            var _props = this.props;
            var rows = _props.rows;
            var columns = _props.columns;
            var enableSelection = _props.enableSelection;
            var renderKey = _props.renderKey;
            var selected = _props.selected;

            return _react2['default'].createElement(
                'tbody',
                null,
                rows.map(function (row, index) {
                    var key = row[renderKey] !== undefined ? row[renderKey] : index,
                        ifSelected = _lodash2['default'].indexOf(selected, key) > -1;

                    return _react2['default'].createElement(_gridrowJs2['default'], {
                        key: 'grid-tr-' + key,
                        row: row,
                        columns: columns,
                        info: { rowIndex: index, keyValue: key },
                        enableSelection: enableSelection,
                        ifSelected: ifSelected,
                        onSelect: self.props.onSelect
                    });
                })
            );
        }
    }]);

    return GridBody;
})(_react.Component);

;

exports['default'] = GridBody;
module.exports = exports['default'];