'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _pickerJs = require('./picker.js');

var _pickerJs2 = _interopRequireDefault(_pickerJs);

var _inputerJs = require('./inputer.js');

var _inputerJs2 = _interopRequireDefault(_inputerJs);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _catUtil = require('cat-util');

// 此接口可能还是会放到外层
function dateFormat(day, format) {
    if (!day) {
        return '';
    } else {
        return (0, _moment2['default'])(day).format(format);
    }
};

var Datepicker = (function (_Component) {
    _inherits(Datepicker, _Component);

    function Datepicker() {
        var _this = this;

        _classCallCheck(this, Datepicker);

        _get(Object.getPrototypeOf(Datepicker.prototype), 'constructor', this).apply(this, arguments);

        this.state = {
            visible: false,
            activeDate: new Date(),
            result: ''
        };

        this._handleClickInput = function (vi) {
            _this.setState({
                visible: typeof vi === 'undefined' ? !_this.state.visible : vi
            });
        };

        this._handleSelect = function (day, visible) {
            var result = dateFormat(day, _this.props.format);
            // 点击逻辑：结果和活跃的都更新
            _this.setState({
                activeDate: day,
                visible: visible,
                result: result
            });
            // 向外部发送消息
            _this.props.onChange(result);
        };
    }

    _createClass(Datepicker, [{
        key: '_handleKeyDown',
        value: function _handleKeyDown(event) {
            if (event.keyCode == _catUtil.keyCode.ESC) {
                this._handleClickInput(false);
            }
            if (event.target.nodeName.toLowerCase() === 'input') {
                return undefined;
            }
            //const keyCode = event.keyCode;
            //const ctrlKey = event.ctrlKey || event.metaKey;
        }
    }, {
        key: '_handleBlur',
        value: function _handleBlur(name, event) {
            if (!event.relatedTarget || event.relatedTarget.nodeName.toLowerCase() === 'input') {
                this._handleClickInput(false);
            }
        }

        // 外部更新
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var value = nextProps.value;
            var format = nextProps.format;

            var activeDate = (0, _moment2['default'])(value, format)._d;
            if (activeDate.toString() === 'Invalid Date') activeDate = new Date();

            this.setState({
                activeDate: activeDate,
                result: value
            });
        }
    }, {
        key: 'componentWillMount',
        value: function componentWillMount() {
            var _props = this.props;
            var defaultDay = _props.defaultDay;
            var value = _props.value;
            var format = _props.format;
            var onChange = _props.onChange;
            var activeDate = (0, _moment2['default'])(value, format)._d;
            if (activeDate.toString() === 'Invalid Date') activeDate = new Date();

            this.setState({
                activeDate: activeDate,
                result: value
            });

            if (defaultDay !== undefined && value === '') {
                activeDate = (0, _moment2['default'])(activeDate).add(defaultDay, 'days')._d;
                var result = dateFormat(activeDate, format);
                this.setState({
                    activeDate: activeDate,
                    result: result
                });
                onChange.call(this, result);
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _props2 = this.props;
            var disabled = _props2.disabled;
            var readOnly = _props2.readOnly;
            var _state = this.state;
            var visible = _state.visible;
            var result = _state.result;
            var activeDate = _state.activeDate;
            var date_ac = new Date(activeDate);
            var date_se = new Date(activeDate);

            return _react2['default'].createElement(
                'div',
                { className: 'cat-calendar-container',
                    onKeyDown: this._handleKeyDown.bind(this),
                    onBlur: this._handleBlur.bind(this, 'container')
                },
                _react2['default'].createElement(_inputerJs2['default'], {
                    value: result,
                    disabled: disabled,
                    readOnly: readOnly,
                    onSelect: this._handleClickInput
                }),
                _react2['default'].createElement(_pickerJs2['default'], _extends({}, this.props, {
                    activeDate: date_ac,
                    selectedDate: date_se,
                    onSelect: this._handleSelect,
                    visible: visible
                }))
            );
        }
    }], [{
        key: 'propTypes',
        value: {
            value: _react2['default'].PropTypes.string,
            defaultDay: _react2['default'].PropTypes.number,

            showNow: _react2['default'].PropTypes.bool,

            yearOnly: _react2['default'].PropTypes.bool,
            monthOnly: _react2['default'].PropTypes.bool,
            dateOnly: _react2['default'].PropTypes.bool,
            timeOnly: _react2['default'].PropTypes.bool,

            format: _react2['default'].PropTypes.string,
            disabled: _react2['default'].PropTypes.bool,
            readOnly: _react2['default'].PropTypes.bool,

            onChange: _react2['default'].PropTypes.func
        },
        enumerable: true
    }, {
        key: 'defaultProps',
        value: {
            value: '', //这个可以设定默认的时间

            showNow: false,

            yearOnly: false, //出现这个选项，则需要让format是YYYY,点击年份不进入月份
            monthOnly: false, //出现这个选项，则需要让format是YYYY-MM,点击月份不进入日
            dateOnly: true, //出现这个选项，则需要让format是YYYY-MM-DD,点击日关闭
            timeOnly: false, //出现这个选项，不显示日期及以上，需要确定按钮

            format: 'YYYY-MM-DD', //为了避免内部太复杂，format只影响到显示的时候的效果
            disabled: false,
            readOnly: false,

            onChange: function onChange() {}
        },
        enumerable: true
    }]);

    return Datepicker;
})(_react.Component);

exports['default'] = Datepicker;
module.exports = exports['default'];

// 点击切换显影

// 点击日历区域