'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _pickerheaderJs = require('./pickerheader.js');

var _pickerheaderJs2 = _interopRequireDefault(_pickerheaderJs);

var _pickerbodyJs = require('./pickerbody.js');

var _pickerbodyJs2 = _interopRequireDefault(_pickerbodyJs);

var _pickerfooterJs = require('./pickerfooter.js');

var _pickerfooterJs2 = _interopRequireDefault(_pickerfooterJs);

var _pickertimeJs = require('./pickertime.js');

var _pickertimeJs2 = _interopRequireDefault(_pickertimeJs);

var Picker = (function (_Component) {
    _inherits(Picker, _Component);

    function Picker(props) {
        var _this = this;

        _classCallCheck(this, Picker);

        _get(Object.getPrototypeOf(Picker.prototype), 'constructor', this).call(this, props);
        this.state = {
            type: this.props.yearOnly ? 'year' : this.props.monthOnly ? 'month' : 'day',
            activeDate: this.props.activeDate
        };

        this._handleValue = function (d, visible) {
            _this.props.onSelect(d, visible);
        };

        this.dateSwitch = function (target, type) {
            var d = _this.state.activeDate;
            switch (type) {
                case 'day':
                    d.setDate(target);
                    var visible = _this.props.dateOnly !== true;
                    _this._handleValue(d, visible);
                    break;
                case 'month':
                    if (Number.isFinite(target)) {
                        d.setMonth(target);
                        if (!_this.props.monthOnly) {
                            type = "day";
                        } else {
                            _this._handleValue(d, false);
                        }
                    } else if (_this.props.yearOnly) {
                        type = "year";
                    }
                    break;
                case 'year':
                    if (Number.isFinite(target)) {
                        if (Math.abs(d.getFullYear() - target) < 20) {
                            if (!_this.props.yearOnly) {
                                type = "month";
                            } else {
                                _this._handleValue(d, false);
                            }
                        }
                        d.setYear(target);
                    }
                    break;
                // 点击底部按钮进入此条件,点击完成以后回到day状态
                case 'date':
                    d = target ? target : d;
                    type = "day";
                    _this._handleValue(d, false);
                    break;
                case 'hour':
                    type = "day";
                    d.setHours(target);
                    _this._handleValue(d, true);
                    break;
                case 'minute':
                    type = "day";
                    d.setMinutes(target);
                    _this._handleValue(d, true);
                    break;
                case 'seconds':
                    type = "day";
                    d.setSeconds(target);
                    _this._handleValue(d, true);
                    break;
            }
            _this.setState({
                type: type,
                activeDate: d
            });
        };

        this.timeSwitch = function (target, type) {
            _this.setState({
                type: type
            });
        };
    }

    _createClass(Picker, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            this.setState({
                activeDate: nextProps.activeDate,
                selectedDate: nextProps.selectedDate
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var _state = this.state;
            var type = _state.type;
            var activeDate = _state.activeDate;
            var _props = this.props;
            var selectedDate = _props.selectedDate;
            var showNow = _props.showNow;
            var dateOnly = _props.dateOnly;
            var timeOnly = _props.timeOnly;
            var month = activeDate.getMonth();
            var year = activeDate.getFullYear();

            var divStyle = {
                display: this.props.visible ? 'block' : 'none'
            };

            return _react2['default'].createElement(
                'div',
                {
                    className: 'cat-calendar-content',
                    style: divStyle
                },
                _react2['default'].createElement(_pickerheaderJs2['default'], {
                    year: year,
                    month: month,
                    type: type,
                    dateSwitch: this.dateSwitch,
                    timeOnly: timeOnly
                }),
                _react2['default'].createElement(_pickerbodyJs2['default'], {
                    year: year,
                    month: month,
                    type: type,
                    selectedDate: selectedDate,
                    dateSwitch: this.dateSwitch,
                    timeOnly: timeOnly
                }),
                _react2['default'].createElement(_pickertimeJs2['default'], {
                    type: type,
                    dateOnly: dateOnly,
                    timeOnly: timeOnly,
                    timeSwitch: this.timeSwitch,
                    time: selectedDate
                }),
                _react2['default'].createElement(_pickerfooterJs2['default'], {
                    showNow: showNow,
                    dateOnly: dateOnly,
                    timeOnly: timeOnly,
                    selectedDate: selectedDate,
                    dateSwitch: this.dateSwitch
                })
            );
        }
    }]);

    return Picker;
})(_react.Component);

exports['default'] = Picker;
module.exports = exports['default'];