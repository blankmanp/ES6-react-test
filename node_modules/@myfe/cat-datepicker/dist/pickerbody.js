'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _catUtil = require('cat-util');

function getMaxDay(Year, Month) {
    return new Date(Year, Month, 0).getDate();
};

var PickerBody = (function (_Component) {
    _inherits(PickerBody, _Component);

    function PickerBody(props) {
        _classCallCheck(this, PickerBody);

        _get(Object.getPrototypeOf(PickerBody.prototype), 'constructor', this).call(this, props);
        this.today = new Date();
    }

    _createClass(PickerBody, [{
        key: 'handleClick',
        value: function handleClick(number, type) {
            this.props.dateSwitch(number, type);
        }
    }, {
        key: 'renderDay',
        value: function renderDay(f_w, m_d, selectedDate, todayDate) {
            var dayPanel = [],
                count = 42,
                weekday = ['日', '一', '二', '三', '四', '五', '六'];

            if (this.props.timeOnly) {
                return null;
            }

            for (var i = 0; i < 7; i++) {
                dayPanel.push(_react2['default'].createElement(
                    'div',
                    { className: 'cat-calendar-cell cat-calendar-cell-day cat-calendar-cell-day-header', key: 'weekday' + i },
                    _react2['default'].createElement(
                        'button',
                        { className: 'btn btn-default btn-block', disabled: 'disabled', type: 'button' },
                        weekday[i]
                    )
                ));
            }
            for (var i = f_w; i > 0; i--) {
                dayPanel.push(_react2['default'].createElement('div', { className: 'cat-calendar-cell cat-calendar-cell-day', key: 'empty-prev' + i }));
            }
            for (var i = 1; i <= m_d; i++) {
                var classes = (0, _catUtil.setClass)({
                    'cat-calendar-cell': true,
                    'cat-calendar-cell-day': true,
                    'cat-calendar-cell-current': todayDate === i,
                    'cat-calendar-cell-selected': selectedDate === i
                });
                dayPanel.push(_react2['default'].createElement(
                    'div',
                    { className: classes, key: 'day' + i },
                    _react2['default'].createElement(
                        'button',
                        { className: 'btn btn-default btn-block', onClick: this.handleClick.bind(this, i, 'day'), type: 'button' },
                        todayDate === i ? '今' : i
                    )
                ));
            }
            for (var i = count - f_w - m_d; i > 0; i--) {
                dayPanel.push(_react2['default'].createElement('div', { className: 'cat-calendar-cell cat-calendar-cell-day', key: 'empty-next' + i }));
            }

            return dayPanel;
        }
    }, {
        key: 'renderMonth',
        value: function renderMonth(selectedMonth, todayMonth) {
            var monthPanel = [];

            for (var i = 0; i < 12; i++) {
                var classes = (0, _catUtil.setClass)({
                    'cat-calendar-cell': true,
                    'cat-calendar-cell-month': true,
                    'cat-calendar-cell-current': todayMonth === i,
                    'cat-calendar-cell-selected': selectedMonth === i
                });
                monthPanel.push(_react2['default'].createElement(
                    'div',
                    { className: classes, key: 'month' + i },
                    _react2['default'].createElement(
                        'button',
                        { className: 'btn btn-default btn-block', onClick: this.handleClick.bind(this, i, 'month'), type: 'button' },
                        i + 1,
                        '月'
                    )
                ));
            }
            return monthPanel;
        }
    }, {
        key: 'renderYear',
        value: function renderYear(year, selectedYear, todayYear) {
            var YearPanel = [],
                startYear = year - year % 20;

            for (var i = startYear; i < startYear + 20; i++) {
                var classes = (0, _catUtil.setClass)({
                    'cat-calendar-cell': true,
                    'cat-calendar-cell-year': true,
                    'cat-calendar-cell-current': todayYear === i,
                    'cat-calendar-cell-selected': selectedYear === i
                });
                YearPanel.push(_react2['default'].createElement(
                    'div',
                    { className: classes, key: 'year' + i },
                    _react2['default'].createElement(
                        'button',
                        { className: 'btn btn-default btn-block', onClick: this.handleClick.bind(this, i, 'year'), type: 'button' },
                        i,
                        '年'
                    )
                ));
            }
            return YearPanel;
        }
    }, {
        key: 'renderHour',
        value: function renderHour(selectedHour) {
            var HourPanel = [];

            for (var i = 0; i < 24; i++) {
                var classes = (0, _catUtil.setClass)({
                    'cat-calendar-cell': true,
                    'cat-calendar-cell-hour': true,
                    'cat-calendar-cell-current': false,
                    'cat-calendar-cell-selected': selectedHour === i
                });
                HourPanel.push(_react2['default'].createElement(
                    'div',
                    { className: classes, key: 'hour' + i },
                    _react2['default'].createElement(
                        'button',
                        { className: 'btn btn-default btn-block', onClick: this.handleClick.bind(this, i, 'hour'), type: 'button' },
                        i
                    )
                ));
            }

            return HourPanel;
        }
    }, {
        key: 'render60',
        value: function render60(type, selected) {
            var TimePanel = [];

            for (var i = 0; i < 60; i++) {
                var classes = (0, _catUtil.setClass)({
                    'cat-calendar-cell': true,
                    'cat-calendar-cell-60': true,
                    'cat-calendar-cell-current': false,
                    'cat-calendar-cell-selected': selected === i
                });
                TimePanel.push(_react2['default'].createElement(
                    'div',
                    { className: classes, key: type + i },
                    _react2['default'].createElement(
                        'button',
                        { className: 'btn btn-default btn-block', onClick: this.handleClick.bind(this, i, type), type: 'button' },
                        i
                    )
                ));
            }

            return TimePanel;
        }
    }, {
        key: 'renderContent',
        value: function renderContent() {
            var year = this.props.year,
                month = this.props.month,
                todayDate = this.today.getDate(),
                todayMonth = this.today.getMonth(),
                todayYear = this.today.getFullYear(),
                selectedDate = this.props.selectedDate;

            switch (this.props.type) {
                case 'day':
                    var MaxDay = getMaxDay(year, month + 1),
                        FirstDayOfMonth = new Date(year, month, 1).getDay();
                    selectedDate = selectedDate.getFullYear() === year && selectedDate.getMonth() === month ? selectedDate.getDate() : -1;
                    if (year != todayYear || month != todayMonth) {
                        todayDate = -1;
                    }

                    return this.renderDay(FirstDayOfMonth, MaxDay, selectedDate, todayDate);
                    break;
                case 'month':
                    var selectedMonth = selectedDate.getFullYear() === year ? selectedDate.getMonth() : -1;
                    if (year != todayYear) {
                        todayMonth = -1;
                    }
                    return this.renderMonth(selectedMonth, todayMonth);
                    break;
                case 'year':
                    var selectedYear = selectedDate.getFullYear();
                    return this.renderYear(year, selectedYear, todayYear);
                    break;
                case 'hour':
                    var selectedHour = selectedDate.getHours();
                    return this.renderHour(selectedHour);
                    break;
                case 'minute':
                    var selectedMinute = selectedDate.getMinutes();
                    return this.render60('minute', selectedMinute);
                    break;
                case 'seconds':
                    var selectedSeconds = selectedDate.getSeconds();
                    return this.render60('seconds', selectedSeconds);
                    break;
            }
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2['default'].createElement(
                'div',
                { className: 'cat-calendar-body clearfix' },
                this.renderContent()
            );
        }
    }]);

    return PickerBody;
})(_react.Component);

exports['default'] = PickerBody;
module.exports = exports['default'];