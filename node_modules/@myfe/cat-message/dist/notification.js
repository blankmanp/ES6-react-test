'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _notice = require('./notice');

var _notice2 = _interopRequireDefault(_notice);

/* for notice_id */
var count = 0;

var Notification = (function (_Component) {
    _inherits(Notification, _Component);

    _createClass(Notification, null, [{
        key: 'propTypes',
        value: {
            notices: _react2['default'].PropTypes.array,
            preFixName: _react2['default'].PropTypes.string
        },
        enumerable: true
    }, {
        key: 'defaultProps',
        value: {
            notices: [],
            preFixName: 'cat'
        },
        enumerable: true
    }]);

    function Notification(props) {
        var _this = this;

        _classCallCheck(this, Notification);

        _get(Object.getPrototypeOf(Notification.prototype), 'constructor', this).call(this, props);
        this.state = {
            notices: this.props.notices.map(function (notice) {
                notice.id = _this.genKey();
                return notice;
            }) || []
        };
    }

    /* can insert to any dom */
    // Notification.containerMap = new WeakMap();

    _createClass(Notification, [{
        key: 'add',
        value: function add(notice) {
            notice.id = this.genKey();
            var notices = this.state.notices;

            this.setState({
                notices: notices.concat(notice)
            });
        }
    }, {
        key: 'remove',
        value: function remove(id) {
            var notices = this.state.notices.filter(function (notice) {
                return notice.id != id;
            });
            this.setState({
                notices: notices
            });
        }
    }, {
        key: 'genKey',
        value: function genKey() {
            return 'notice_' + count++;
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var notices = this.state.notices;
            var preFixName = this.props.preFixName;

            return _react2['default'].createElement(
                'div',
                { className: preFixName + '-notice-list' },
                notices.map(function (notice) {
                    return _react2['default'].createElement(
                        _notice2['default'],
                        {
                            key: notice.id,
                            onClose: _this2.remove.bind(_this2, notice.id),
                            duration: notice.duration,
                            type: notice.type
                        },
                        notice.content
                    );
                })
            );
        }
    }]);

    return Notification;
})(_react.Component);

exports['default'] = Notification;
Notification.key = 0;
Notification.containerMap = {};

/* instance */
Notification.instance = function () {
    var container = arguments.length <= 0 || arguments[0] === undefined ? document.body : arguments[0];

    var reg = /noticelist-(\d+)/,
        match = (container.className || '').match(reg),
        noticeId = match && match[1];
    if (noticeId) {
        return Notification.containerMap['noticelist-' + noticeId];
    } else {
        var div = document.createElement('div'),
            notices = _reactDom2['default'].render(_react2['default'].createElement(Notification, { notices: [] }), div);
        div.className = 'cat-message-container';

        if (container === document.body) {
            container.appendChild(div);
        } else {
            container.insertBefore(div, container.firstChild);
        }
        //get container class
        Notification.containerMap['noticelist-' + ++Notification.key] = notices;
        container.className = container.className + ' noticelist-' + Notification.key;
        // Notification.containerMap.set(container, notices);
        return notices;
    }
};
module.exports = exports['default'];