import React, { Component } from 'react';
import ReactDOM from 'react-dom';
import Notice from './notice';

/* for notice_id */
let count = 0;

export default class Notification extends Component {
    static propTypes = {
        notices: React.PropTypes.array,
        preFixName: React.PropTypes.string
    }

    static defaultProps = {
        notices: [],
        preFixName: 'cat'
    }

    state = {
        notices : this.props.notices.map((notice) => {
            notice.id = this.genKey();
            return notice;
        }) || []
    }

    constructor(props) {
        super(props);
    }

	add(notice) {
		notice.id = this.genKey();
		let { notices } = this.state;
		this.setState({
			notices: notices.concat(notice)
		});
	}

	remove(id) {
		let notices = this.state.notices.filter((notice) => {
                return notice.id != id;
            });
		this.setState({
			notices: notices
		});
	}

	genKey() {
		return 'notice_' + count++;
	}

	render() {
		let { notices } = this.state,
            { preFixName } = this.props;

		return (
			<div className={`${preFixName}-notice-list`}>
				{
                    notices.map((notice) => {
                        return (
                            <Notice
                                key={notice.id}
                                onClose={this.remove.bind(this, notice.id)}
                                duration={notice.duration}
                                type={notice.type}
                            >
                                {notice.content}
                            </Notice>
                        );
                    })
                }
			</div>
		);
	}
}

/* can insert to any dom */
// Notification.containerMap = new WeakMap();
Notification.key = 0;
Notification.containerMap = {};

/* instance */
Notification.instance = function (container = document.body) {
	let reg = /noticelist-(\d+)/,
		match = (container.className || '').match(reg),
		noticeId = match && match[1];
	if (noticeId) {
		return Notification.containerMap['noticelist-' + noticeId];
	} else {
		let div = document.createElement('div'),
            notices = ReactDOM.render(<Notification notices={[]} />, div);
		div.className = 'cat-message-container';

        if (container === document.body) {
            container.appendChild(div);
        } else {
            container.insertBefore(div, container.firstChild);
        }
		//get container class
		Notification.containerMap['noticelist-' + ++Notification.key] = notices;
		container.className = container.className + ' noticelist-' + Notification.key;
		// Notification.containerMap.set(container, notices);
		return notices;
	}
};
