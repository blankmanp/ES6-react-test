/**
 *  Pagination的设计原则是
 *  @currentPage 当前页
 *  @totalPage 总页数
 *  @mySize 大小
 *  @myStyle 行列式还是固定式
 *  @prefixName 类名前缀
 *  todo: 目前每一次pagination是实时更新的，这样的用户体验可能不理想，我们想要的是总页数只在外界条件改变的时候更新，而每一次内部点击的时候，都仅仅进行内部的更新，所以内部的state需要维护，而不是每一次什么都由外部控制
 *
 **/
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _pager = require('./pager');

var _pager2 = _interopRequireDefault(_pager);

var Pagination = (function (_Component) {
    _inherits(Pagination, _Component);

    _createClass(Pagination, null, [{
        key: 'propTypes',
        value: {
            offset: _react2['default'].PropTypes.number,
            totalPage: _react2['default'].PropTypes.number,

            mySize: _react2['default'].PropTypes.string,
            myStyle: _react2['default'].PropTypes.string,
            prefixName: _react2['default'].PropTypes.string,
            update: _react2['default'].PropTypes.func,
            maxSize: _react2['default'].PropTypes.number,
            className: _react2['default'].PropTypes.string
        },
        enumerable: true
    }, {
        key: 'defaultProps',
        value: {
            offset: 0,
            totalPage: -1,
            mySize: 'normal', //large, normal, smal
            myStyle: 'omitted', //fullsize, omitted, compressed
            prefixName: 'cat',
            maxSize: 10,
            className: ''
        },
        enumerable: true
    }]);

    function Pagination(props) {
        var _this = this;

        _classCallCheck(this, Pagination);

        _get(Object.getPrototypeOf(Pagination.prototype), 'constructor', this).call(this, props);
        this.sizes = {
            large: 'lg',
            normal: '',
            small: 'sm'
        };
        this.state = {
            jump: ''
        };

        this._handleClick = function (newPage) {
            _this.props.update(newPage);
        };

        this._enter = function (e) {
            var value = e.target.value;
            if (value === '' || /\d$/.test(value)) {
                _this.setState({
                    jump: value
                });
            }
        };

        this._jump = function (e) {
            e.preventDefault();
            var totalPage = _this.props.totalPage;
            var jump = _this.state.jump;

            if (jump !== '' && (totalPage === -1 || jump <= totalPage)) {
                _this._handleClick(jump - 1);
                _this.setState({
                    jump: ''
                });
            }
        };
    }

    // 点击事件

    _createClass(Pagination, [{
        key: '_getList',

        // 生成列表数据
        value: function _getList(myStyle, offset, totalPage) {
            var list = [],
                i = 0,
                start = 0,
                end = 1,
                maxSize = this.props.maxSize;

            if (totalPage === -1 || myStyle === 'compressed') {
                list.push({
                    page: (offset + 1).toString() + (myStyle === 'compressed' && totalPage !== 0 ? '/' + totalPage : ''),
                    target: offset
                });
            } else if (myStyle === 'fullsize' || totalPage < maxSize) {
                while (i < totalPage) {
                    list.push({
                        page: (i + 1).toString(),
                        target: i
                    });
                    i++;
                }
            } else {
                start = offset - maxSize / 2;
                start = start > totalPage - maxSize - 2 ? totalPage - maxSize - 2 : start;
                start = start < 0 ? 0 : start;
                while (i < maxSize && start < totalPage - 3) {
                    list.push({
                        page: (start + 1).toString(),
                        target: start
                    });
                    start++;
                    i++;
                }
                if (i === maxSize) {
                    list.push({
                        page: '···',
                        target: -1
                    });
                } else {
                    list.push({
                        page: (totalPage - 2).toString(),
                        target: totalPage - 3
                    }, {
                        page: (totalPage - 1).toString(),
                        target: totalPage - 2
                    });
                }
                list.push({
                    page: totalPage.toString(),
                    target: totalPage - 1
                });
            }
            list.unshift({
                page: '〈 上一页',
                target: offset - 1
            });
            list.push({
                page: '下一页 〉',
                target: offset + 1
            });
            return list;
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props;
            var prefixName = _props.prefixName;
            var mySize = _props.mySize;
            var myStyle = _props.myStyle;
            var className = _props.className;
            var totalPage = _props.totalPage;
            var offset = _props.offset;
            var maxSize = _props.maxSize;
            var jump = this.state.jump;
            var classes = prefixName + '-pagination ' + prefixName + '-pagination-' + this.sizes[mySize] + ' ' + className;
            var self = this;
            var list = this._getList(myStyle, offset, totalPage);

            return _react2['default'].createElement(
                'ul',
                { className: classes },
                _lodash2['default'].map(list, function (item) {
                    return _react2['default'].createElement(_pager2['default'], {
                        page: item.page,
                        key: item.page,
                        target: item.target,
                        offset: offset,
                        totalPage: totalPage,
                        handleClick: self._handleClick
                    });
                }),
                (function () {
                    if (totalPage === -1 || totalPage > maxSize) {
                        var jumps = [_react2['default'].createElement(
                            'li',
                            { key: 'jumpText', className: 'text-container' },
                            _react2['default'].createElement(
                                'span',
                                null,
                                '到第',
                                _react2['default'].createElement('input', {
                                    type: 'text',
                                    onChange: self._enter,
                                    value: jump
                                }),
                                '页'
                            )
                        ), _react2['default'].createElement(
                            'li',
                            { key: 'jumpButton' },
                            _react2['default'].createElement(
                                'a',
                                { onClick: self._jump, className: 'jump-button', href: '#' },
                                '确定'
                            )
                        )];
                        return jumps;
                    } else {
                        return null;
                    }
                })()
            );
        }
    }]);

    return Pagination;
})(_react.Component);

;

exports['default'] = Pagination;
module.exports = exports['default'];

// 输入数字

// 跳转