'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _catUtil = require('cat-util');

var SIZES = {
    'large': 'lg',
    'medium': '',
    'small': 'sm',
    'xsmall': 'xs'
};

var Button = (function (_Component) {
    _inherits(Button, _Component);

    function Button() {
        _classCallCheck(this, Button);

        _get(Object.getPrototypeOf(Button.prototype), 'constructor', this).apply(this, arguments);
    }

    _createClass(Button, [{
        key: '_renderLink',

        // render链接
        value: function _renderLink(classNames) {
            var Node = this.props.componentClass || 'a';
            var _props = this.props;
            var href = _props.href;
            var target = _props.target;

            return _react2['default'].createElement(
                Node,
                { href: href ? href : '#', target: target ? target : '_blank', className: classNames },
                this.props.children
            );
        }
    }, {
        key: 'handleClick',
        value: function handleClick(event) {
            this.props.onClick && this.props.onClick(event);
        }

        // render按钮
    }, {
        key: '_renderButton',
        value: function _renderButton(classNames) {
            var Node = this.props.componentClass || 'button',
                disabled = this.props.disabled || this.props.loading ? true : false;

            return _react2['default'].createElement(
                Node,
                { className: classNames, disabled: disabled, onClick: this.handleClick.bind(this), type: this.props.buttonType },
                this.props.children
            );
        }
    }, {
        key: 'render',
        value: function render() {
            var _setClass;

            var renderer = this.props.href || this.props.target ? '_renderLink' : '_renderButton';
            var _props2 = this.props;
            var className = _props2.className;
            var myStyle = _props2.myStyle;
            var mySize = _props2.mySize;
            var block = _props2.block;
            var active = _props2.active;
            var disabled = _props2.disabled;
            var loading = _props2.loading;
            var classNames = (0, _catUtil.setClass)('btn', 'btn-' + myStyle, (_setClass = {}, _defineProperty(_setClass, 'btn-' + SIZES[mySize], mySize !== 'medium'), _defineProperty(_setClass, 'btn-block', block), _defineProperty(_setClass, 'btn-active', active), _defineProperty(_setClass, 'cat-loading-btn', loading), _defineProperty(_setClass, 'disabled', disabled), _setClass), className);

            return this[renderer](classNames);
        }
    }], [{
        key: 'propTypes',
        value: {
            myStyle: _react2['default'].PropTypes.string, //风格
            mySize: _react2['default'].PropTypes.string, //大小
            className: _react2['default'].PropTypes.string, //自定义组件类名
            block: _react2['default'].PropTypes.bool, //块级风格
            componentClass: _react2['default'].PropTypes.string, //自定义标签类型
            active: _react2['default'].PropTypes.bool,
            disabled: _react2['default'].PropTypes.bool,
            loading: _react2['default'].PropTypes.bool,
            buttonType: _react2['default'].PropTypes.string
        },
        enumerable: true
    }, {
        key: 'defaultProps',
        value: {
            myStyle: 'default',
            mySize: 'medium',
            className: '',
            block: false,
            active: false,
            disabled: false,
            loading: false,
            buttonType: 'button'
        },
        enumerable: true
    }]);

    return Button;
})(_react.Component);

exports['default'] = Button;
module.exports = exports['default'];