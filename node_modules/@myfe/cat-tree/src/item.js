import React, { Component } from 'react';
import { setClass } from 'cat-util';
import _ from 'lodash';
import List from './list';

export default class Item extends Component {

    static propTypes = {
        data: React.PropTypes.object
    };

    static defaultProps = {
        data: {},
    };

    constructor(props) {
        super(props);
        let status = this._isSelected('open', this.props);
        this.state = {
            open: status,
            selected: status
        };
    }

    _isSelected(type, props) {
        let { active, selected, data, selectKey } = props;
        switch (type) {
            case 'open':
                if (active.length > 0 && _.last(active)[selectKey] === props.data[selectKey]) {
                    return this.state ?
                            (this.state.open && active.length === 1 ? false : true) :
                            true;
                }
                break;
            case 'selected':
                if (selected.length > 0 && _.last(selected)[selectKey] === data[selectKey]) {
                    return true;
                }
                break;
        }
        return false;
    }

    _handleClick(event) {
        this.props.onClick([this.props.data]);
    }

    _handleListClick(actives) {
        actives.push(this.props.data);
        this.props.onClick(actives);
    }

    componentWillReceiveProps(nextProps) {
        this.setState({
            open: this._isSelected('open', nextProps),
            selected: this._isSelected('selected', nextProps)
        });
    }

    // render Icon
    _renderIcon() {
        let { data } = this.props,
            icon = data.icon;
        if (!icon) {
            return null;
        } else {
            if (typeof icon === 'string') {
                return <i className={icon} />;
            } else {
                return icon;
            }
        }
    }
    _renderSubIcon() {
        let { data, opened } = this.props,
            { open } = this.state,
            iStyle = {
                transform: open || opened ? 'rotate(90deg)' : ''
            }

        if (!data.children) {
            return null;
        } else {
            return <i className="glyphicon glyphicon-chevron-right has-child-icon" style={iStyle}/>;
        }
    }

    // render 子Ul
    _renderSubList() {
        let { data, selected, active, selectKey, opened } = this.props,
            { open } = this.state;

        if (open && active.length > 0) {
            active.pop();
        }

        if (!data.children) {
            return null;
        } else {
            return <List data={data.children} open={open} opened={opened} selected={selected} active={active} selectKey={selectKey} onClick={this._handleListClick.bind(this)}/>;
        }
    };

    render() {
        let { data } = this.props,
            { selected } = this.state,
            classNames = setClass({
                'selected' : selected,
                'hidden': data.hidden
            });

        return (
            <li className={classNames} >
                <a href={data.href} onClick={this._handleClick.bind(this)} >
                    { this._renderIcon() }
                    <span>{data.name}</span>
                    { this._renderSubIcon() }
                </a>
                { this._renderSubList() }
            </li>
        );
    }
}
