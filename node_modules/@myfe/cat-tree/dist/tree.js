'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _list = require('./list');

var _list2 = _interopRequireDefault(_list);

var _item = require('./item');

var _item2 = _interopRequireDefault(_item);

var Tree = (function (_Component) {
    _inherits(Tree, _Component);

    function Tree() {
        var _this = this;

        _classCallCheck(this, Tree);

        _get(Object.getPrototypeOf(Tree.prototype), 'constructor', this).apply(this, arguments);

        this.state = {
            active: this._getActive(this.props),
            selected: this._getActive(this.props)
        };

        this._handleClick = function (active) {
            _this.setState({
                active: active
            });
            if (_this.props.onClick) {
                _this.props.onClick(active);
            }
        };
    }

    _createClass(Tree, [{
        key: 'filterData',
        value: function filterData(data, selected) {
            var result = [],
                self = this;
            _lodash2['default'].find(data, function (item) {
                if (item.href === selected) {
                    result = [item];
                    return true;
                } else if (item.children) {
                    result = self.filterData(item.children, selected);
                    if (result.length > 0) {
                        result.push(item);
                        return true;
                    } else {
                        return false;
                    }
                }
                return false;
            });
            return result;
        }
    }, {
        key: '_getActive',
        value: function _getActive(props) {
            var data = props.data;
            var selected = props.selected;

            if (!Array.isArray(data)) {
                data = [data];
            }

            return this.filterData(data, selected);
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            if (nextProps.dynamic) {
                var active = this._getActive(nextProps);

                this.setState({
                    active: active,
                    selected: active
                });
            }
        }
    }, {
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps, nextState) {
            return nextProps.data !== this.props.data || this.props.dynamic;
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props;
            var prefixName = _props.prefixName;
            var data = _props.data;
            var _state = this.state;
            var active = _state.active;
            var selected = _state.selected;
            var Component = Array.isArray(data) ? _list2['default'] : _item2['default'];

            return _react2['default'].createElement(
                'div',
                { className: prefixName + '-tree' },
                _react2['default'].createElement(Component, _extends({}, this.props, {
                    active: active,
                    selected: selected,
                    onClick: this._handleClick
                }))
            );
        }
    }], [{
        key: 'propTypes',
        value: {
            selected: _react2['default'].PropTypes.string,
            dynamic: _react2['default'].PropTypes.bool,
            open: _react2['default'].PropTypes.bool,
            selectKey: _react2['default'].PropTypes.string,
            opened: _react2['default'].PropTypes.bool,
            prefixName: _react2['default'].PropTypes.string
        },
        enumerable: true
    }, {
        key: 'defaultProps',
        value: {
            selected: '', // 选中的, 这里默认的key是href
            dynamic: true, // 是否接受外界新数据, 如果设置false，组件将默认全部展开，且点击不折叠
            open: true, // 根组件默认展开
            selectKey: 'name', // 匹配默认的key值
            opened: false,
            prefixName: 'cat' // 前缀名
        },
        enumerable: true
    }]);

    return Tree;
})(_react.Component);

exports['default'] = Tree;
module.exports = exports['default'];