'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _myfeCatButton = require('@myfe/cat-button');

var _myfeCatButton2 = _interopRequireDefault(_myfeCatButton);

var Confirm = (function (_Component) {
    _inherits(Confirm, _Component);

    function Confirm() {
        _classCallCheck(this, Confirm);

        _get(Object.getPrototypeOf(Confirm.prototype), 'constructor', this).apply(this, arguments);

        this.state = {
            text: this.props.config.value
        };
    }

    _createClass(Confirm, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            this.setState({
                text: nextProps.config.value
            });
        }
    }, {
        key: 'updateInput',
        value: function updateInput(event) {
            this.setState({
                text: event.target.value
            });
        }
    }, {
        key: 'handleClick',
        value: function handleClick(confirm) {
            if (this.props.isPrompt) {
                this.setState({
                    text: undefined
                });
            }
            if (confirm || !confirm && this.props.config.cancelFunction) {
                if (this.props.isPrompt) {
                    confirm = this.state.text;
                }
                this.props.callback(confirm);
            }
            this.props.close();
        }
    }, {
        key: 'renderInput',
        value: function renderInput() {
            return this.props.isPrompt ? _react2['default'].createElement(
                'form',
                null,
                _react2['default'].createElement(
                    'div',
                    { className: 'form-group' },
                    _react2['default'].createElement('textarea', {
                        type: 'text',
                        className: 'form-control',
                        placeholder: this.props.config.inputPlaceholder,
                        value: this.state.text,
                        onChange: this.updateInput.bind(this)
                    })
                )
            ) : null;
        }
    }, {
        key: 'render',
        value: function render() {
            var config = this.props.config;
            var _config$cancelText = config.cancelText;
            var cancelText = _config$cancelText === undefined ? '取消' : _config$cancelText;
            var _config$confirmText = config.confirmText;
            var confirmText = _config$confirmText === undefined ? '确定' : _config$confirmText;
            var _config$style = config.style;
            var style = _config$style === undefined ? 'info' : _config$style;
            var icons = {
                success: 'ok-sign',
                info: 'info-sign',
                warning: 'bell',
                danger: 'alert'
            };
            var iconClassName = 'glyphicon glyphicon-' + (icons[style] ? icons[style] : 'info-sign');

            return _react2['default'].createElement(
                'div',
                { className: 'clearfix cat-confirm' },
                _react2['default'].createElement(
                    'div',
                    { className: 'row cat-alert-container' },
                    _react2['default'].createElement('i', { className: iconClassName }),
                    _react2['default'].createElement(
                        'div',
                        null,
                        _react2['default'].createElement(
                            'h2',
                            null,
                            this.props.config.title
                        ),
                        _react2['default'].createElement(
                            'p',
                            null,
                            this.props.config.text
                        ),
                        this.renderInput()
                    )
                ),
                _react2['default'].createElement(
                    _myfeCatButton2['default'],
                    {
                        onClick: this.handleClick.bind(this, false)
                    },
                    cancelText
                ),
                _react2['default'].createElement(
                    _myfeCatButton2['default'],
                    {
                        onClick: this.handleClick.bind(this, true),
                        myStyle: style
                    },
                    confirmText
                )
            );
        }
    }]);

    return Confirm;
})(_react.Component);

exports['default'] = Confirm;
module.exports = exports['default'];