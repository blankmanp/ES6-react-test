import React, {Component} from 'react';
import text from './types/text';
import number from './types/number';
import radio from './types/radio';
import checkbox from './types/checkbox';
import select from './types/select';
import datepicker from './types/datepicker';
import switchType from './types/switch';
import info from './types/info';
import _ from 'lodash';

import prefixName from './prefix-name'

class FormControl extends Component {

    static types = {
        text: text,
        number: number,
        checkbox: checkbox,
        radio: radio,
        select: select,
        date: datepicker,
        switch: switchType,
        datepicker: datepicker,
        info: info
    };

    static register(type, options) {
        FormControl.types[type] = options;
    }

    static propTypes = {
        name: React.PropTypes.string.isRequired,
        type: React.PropTypes.string,
        value: React.PropTypes.any,
        layout: React.PropTypes.oneOf(['aligned', 'double', 'inline', '0', '1', '2', '3', '4', 0, 1, 2, 3, 4]),
        clear: React.PropTypes.bool,
        labelWidth: React.PropTypes.oneOfType([
            React.PropTypes.number,
            React.PropTypes.string
        ]),
        size: React.PropTypes.oneOf(['small', 'normal', 'large']),
        label: React.PropTypes.string,
        show: React.PropTypes.oneOfType([
            React.PropTypes.bool,
            React.PropTypes.func
        ]),
        disabled: React.PropTypes.oneOfType([
            React.PropTypes.bool,
            React.PropTypes.func
        ]),
        tip: React.PropTypes.string,
        _onChange: React.PropTypes.func
    };

    static defaultProps = {
        value: '',
        type: 'text',
        label: '',
        tip: '',
        disabled: false,
        clear: false,
        show: true
    };

    editor = {
        defaultValue: '',
        renderEditor: (value, changeHandler) =>
            <input className={`${prefixName}-form-control`} value={value} onChange={changeHandler}/>,
        validate: () => true,
        pickValue: value => value
    };

    state = {
        value: '',
        validation: false,
        tip: ''
    };
    noModify = true; //是否是type级别默认值

    componentWillMount() {
        this._formatLayout();
        if (this.props.type && !FormControl.types[this.props.type]) {
            console.warn('FormControl 的 type:' + this.props.type + '不存在');
        }
        if (!this.props._onChange) {
            console.error('FormControl 不能脱离 Form 使用！');
        }

        _.assign(this.editor, FormControl.types[this.props.type]);
        //向下兼容
        if (_.isUndefined(FormControl.types[this.props.type].renderEditor)) {
            this.editor.renderEditor = this.editor.render;
        }

        let reset = _.isUndefined(this.props.value),
            value = reset ?
                (
                    !_.isUndefined(this.props.defaultValue)
                        ? _.cloneDeep(this.props.defaultValue)
                        : _.cloneDeep(this.editor.defaultValue)
                )
                : this.props.value;
        let validation = this.validate(value);
        this.setState({
            value: value,
            validation: validation
        });
        this.props._onChange({
            name: this.props.name,
            value: value,
            validation: validation,
            data: this.props.data,
            type: reset ? 'reset' : 'validation'
        });
    }

    componentWillReceiveProps(nextProps) {
        let reset = _.isUndefined(nextProps.value) || nextProps.event.type === 'form-reset',
            value = reset ?
                (
                    !_.isUndefined(nextProps.defaultValue)
                        ? _.cloneDeep(nextProps.defaultValue)
                        : _.cloneDeep(this.editor.defaultValue)
                )
                : nextProps.value;
        let nextValidation = nextProps.validation;
        if (!this.isEqual(this.props, nextProps)
            || value !== this.state.value
            || this._isListen(nextProps.listen, nextProps.event.name)) {
            nextValidation = this.validate(value, nextProps.show, nextProps.data);
            this.props._onChange({
                name: this.props.name,
                value: value,
                validation: nextValidation,
                type: 'validation'
            });
            this.setState({
                value: value,
                validation: nextValidation
            });
        }

        if (reset) {
            this.props._onChange({
                name: this.props.name,
                value: value,
                validation: nextValidation,
                type: 'reset'
            });
        }
    }

    _isListen(listen = this.props.listen, name = this.props.event.name) {
        if (!listen)
            return false;
        return (_.isArray(listen) && listen.indexOf(name) !== -1)
            || (_.isString(listen) && listen === name);
    }

    shouldComponentUpdate(nextProps, nextState) {
        let changed = nextProps.event.name === nextProps.name
            || !_.isEqual(this.state.value, nextState.value)
            || this.state.validation !== nextState.validation
            || !this.isEqual(this.props, nextProps);
        if (!changed && this._isListen(nextProps.listen, nextProps.event.name)) {
            changed = true;
        }
        return changed;
    }

    _asyncValidateCallback(result = true) {
        let res = this._formatValidateResult(result);
        this.setState({
            validation: res.result,
            tip: res.tip
        });
        this.props._onChange({
            name: this.props.name,
            value: this.state.value,
            validation: res.result,
            type: 'validation'
        });
    };

    validate(value = this.state.value,
             show = this.props.show,
             data = this.props.data) {
        if (!(_.isFunction(show) ? show(data) : show))
            return true;

        let noModify = _.isEqual(value, this.editor.defaultValue);
        let result = true, tip = '', r;

        //type独有验证
        r = this._formatValidateResult(this.editor.validate.call(this, value, data));
        if (!r.result) {
            result = r.result;
            tip = r.tip;
        }
        //正则表达式验证
        if (this.props.reg && !new RegExp(this.props.reg).test(value)) {
            result = false;
            tip = this.props.regTip || '输入不正确';
        }
        //props参数验证
        if (_.isFunction(this.props.validate)) {
            r = this.props.validate.call(this, value, data, this._asyncValidateCallback.bind(this));
            r = this._formatValidateResult(r);
            if (!r.result) {
                result = r.result;
                tip = r.tip;
            }
        }

        //非空验证
        if (this.props.required && noModify) {
            result = false;
            tip = '请填写' + this.props.label;
        }

        this.noModify = noModify;
        this.state.validation = result;
        this.state.tip = tip;
        return result;
    }

    changeHandler() {
        let value = this.editor.pickValue.apply(this, arguments),
            validation = this.validate(value);
        this.setState({
            value: value,
            validation: validation
        });
        this.props._onChange({
            name: this.props.name,
            value: value,
            validation: validation,
            type: 'change'
        });
    }

    _renderContent(showError) {
        let content = this.editor.renderEditor.call(this, _.clone(this.state.value), this.changeHandler.bind(this));
        if (this.layout > 0) {
            let className = this.layout !== 0 ? `${prefixName}-form-col-${24 - this.props.labelWidth}` : '';
            return (
                <div className={className}>
                    {content}
                    <span className={`${prefixName}-help-block`}>
                        {showError && this.state.tip ? this.state.tip : this.props.tip}
                    </span>
                </div>
            )
        }
        return content;
    }

    render() {
        let show = _.isFunction(this.props.show) ? this.props.show(this.props.data) : this.props.show,
            showError = !this.state.validation;

        if (showError && this.noModify && !this.props.showValidation)
            showError = false;

        let groupClassMap = {
            small: `${prefixName}-form-group-sm`,
            normal: `${prefixName}-form-group`,
            large: `${prefixName}-form-group-lg`
        };

        let className = [
            groupClassMap[this.props.size],
            !show ? `${prefixName}-hide` : '',
            showError ? `${prefixName}-has-error` : '',
            this.layout === 1 ? `${prefixName}-form-col-24` : '',
            this.layout === 2 ? `${prefixName}-form-col-12` : '',
            this.layout === 3 ? `${prefixName}-form-col-8` : '',
            this.layout === 4 ? `${prefixName}-form-col-6` : '',
            this.props.clear ? `${prefixName}-clear` : ''
        ].join(' ');
        let labelClass = [
            `${prefixName}-control-label`,
            this.layout !== 0 ? `${prefixName}-form-col-${this.props.labelWidth}` : '',
            +this.props.labelWidth === 0 ? `${prefixName}-hide` : ''
        ].join(' ');

        return (
            <div className={className}>
                <label className={labelClass}>
                    {this.props.label}
                    {this.props.required ? <span style={{color:'red'}}> *</span> : ''}
                </label>
                {this._renderContent(showError)}
            </div>
        );
    }

    _formatLayout() {
        this.layout = ({
            aligned: 1,
            double: 2,
            inline: 2,
            0: 2,
            1: 1,
            2: 2,
            3: 3,
            4: 4
        })[this.props.layout];
    }

    _formatValidateResult(res) {
        if (_.isArray(res)) {
            return {
                result: !!res[0],
                tip: !!res[0] ? '' : (_.isUndefined(res[1]) ? '输入不正确' : String(res[1]))
            }
        }
        if (_.isObject(res)) {
            return {
                result: !!res.result,
                tip: !!res.result ? '' : (_.isUndefined(res.tip) ? '输入不正确' : String(res.tip))
            }
        }
        return {
            result: !!res,
            tip: !!res ? '' : '输入不正确'
        }

    }

    isEqual(props, nextProps) {
        let res = true;
        Object.keys(nextProps).forEach(key=> {
            if (_.indexOf(['event','_onChange', 'validation', 'value'], key) !== -1) {
                return;
            }
            if (!_.isEqual(props[key], nextProps[key]))
                res = false
        });
        return res;
    }

}


export default FormControl;
