import React,{Component} from 'react';
import _ from 'lodash';

import prefixName from '../prefix-name';
import {canSwitchNumber} from '../tools';

class Radio extends Component {

    static propTypes = {
        options: React.PropTypes.oneOfType([
            React.PropTypes.array,
            React.PropTypes.object
        ]),
        disabled: React.PropTypes.bool,
        value: React.PropTypes.any,
        numberValue: React.PropTypes.bool,
        onChange: React.PropTypes.func
    };

    static defaultProps = {
        options: [],
        value: '',
        disabled: false,
        numberValue: true,
        onChange: function () {
        }
    };

    state = {
        value: this.props.value
    };

    _handleChange(value, event) {
        let v = value;
        if (this.props.numberValue && canSwitchNumber(v))
            v = +v;
        this.setState({
            value: v
        });
        this.props.onChange.call(this, v, event);
    }

    componentWillMount() {
        this._formatOptions();
    }

    componentWillReceiveProps(nextProps) {
        if (this.props.options !== nextProps.options) {
            this._formatOptions(nextProps.options);
        }
        this.setState({
            value: nextProps.value
        })
    }

    _formatOptions(options = this.props.options) {
        if (_.isArray(options)) {
            this.options = options;
        } else if (_.isObject(options)) {
            this.options = [];
            Object.keys(options).forEach(d=> {
                this.options.push({
                    value: d,
                    label: options[d]
                })
            })
        }
    }

    render() {
        let options = this.options,
            value = this.state.value;

        return (
            <span>
                    {
                        options.map(item => {
                            let v = this.props.numberValue && canSwitchNumber(item.value) ? +item.value : item.value;
                            let checked = value === v;
                            let className = `${prefixName}-radio-inline ${this.props.disabled ? 'disabled' : ''}`;
                            return (
                                <label className={className} key={item.value}
                                       onClick={this.props.disabled ? null : this._handleChange.bind(this, item.value)}>
                                    {this._renderBox(checked, this.props.disabled)}
                                    <span>{item.label}</span>
                                </label>
                            )
                        })
                    }
                </span>
        )
    }

    _renderBox(checked, disabled) {
        let content;
        if (checked && !disabled)
            content = <circle cx="8" cy="8" r="5" stroke="#DD403B"
                              strokeWidth="6" fill="#ffffff"/>;
        if (!checked && !disabled)
            content = <circle cx="8" cy="8" r="7.5" stroke="#D4D4D4" className="select-box"
                              strokeWidth="1" fill="#ffffff"/>;
        if (checked && disabled)
            content = [
                <circle cx="8" cy="8" r="7.5" stroke="#D4D4D4" key="0"
                        strokeWidth="1" fill="#F4F4F4"/>,
                <circle cx="8" cy="8" r="2" fill="#D4D4D4" key="1"/>];
        if (!checked && disabled)
            content = <circle cx="8" cy="8" r="7.5" stroke="#D4D4D4"
                              strokeWidth="1" fill="#F4F4F4"/>;
        return (
            <svg width="16" height="16" style={{position: 'absolute',marginLeft: -20,marginTop: 2}}>
                {content}
            </svg>
        )

    }

}

export default Radio;
