import React,{Component} from 'react';
import _ from 'lodash';

import prefixName from '../prefix-name';
import {canSwitchNumber} from '../tools';

class Checkbox extends Component {

    static propTypes = {
        value: React.PropTypes.array,
        disabled: React.PropTypes.bool,
        options: React.PropTypes.oneOfType([
            React.PropTypes.array,
            React.PropTypes.object
        ]),
        numberValue: React.PropTypes.bool,
        onChange: React.PropTypes.func
    };
    static defaultProps = {
        value: [],
        numberValue: true,
        options: [],
        disabled: false,
        onChange: function () {
        }
    };

    state = {
        value: this.props.value
    };

    _checkHandler(v, event) {
        v = this.props.numberValue && canSwitchNumber(v) ? +v : v;
        let value = this.state.value;
        let nextValue = _.indexOf(value, v) === -1 ? value.concat([v]) : _.without(value, v);
        this.setState({
            value: nextValue
        });
        this.props.onChange.call(this, nextValue, event);
    }

    componentWillMount() {
        this._formatOptions();
    }

    componentWillReceiveProps(nextProps) {
        if (this.props.options !== nextProps.options) {
            this._formatOptions(nextProps.options);
        }
        this.setState({
            value: nextProps.value
        })
    }

    _formatOptions(options = this.props.options) {
        if (_.isArray(options)) {
            this.options = options;
        } else if (_.isObject(options)) {
            this.options = [];
            Object.keys(options).forEach(d=> {
                this.options.push({
                    value: d,
                    label: options[d]
                })
            })
        }
    }

    render() {
        let options = this.options;
        let value = this.state.value;
        return (
            <span>
                    {
                        options.map(item => {
                            let checked = false;
                            let v = this.props.numberValue && canSwitchNumber(item.value) ? +item.value : item.value;
                            if (value.indexOf(v) !== -1) {
                                checked = true;
                            }
                            let className = `${prefixName}-checkbox-inline ${this.props.disabled ? 'disabled' : ''}`;
                            return (
                                <label className={className} key={v}
                                       onClick={this.props.disabled ? null : this._checkHandler.bind(this, v)}>
                                    {this._renderBox(checked, this.props.disabled)}
                                    <span>{item.label}</span>
                                </label>
                            )
                        })
                    }
                </span>
        )
    }

    _renderBox(checked, disabled) {
        let content;
        if (checked && !disabled)
            content = [
                <rect x="0.5" y="0.5" width="15" height="15" fill="#DD403B" strokeWidth="1" stroke="#DD403B" key="0"/>,
                <path d="M3 6 L6.5 10.5 L13 5" strokeWidth="3" stroke="#fff" fill="none" key="1"/>
            ];
        if (!checked && !disabled)
            content = <rect x="0.5" y="0.5" width="15" height="15" fill="#fff" strokeWidth="1" stroke="#D4D4D4"
                            className="select-box"/>;
        if (checked && disabled)
            content = [
                <rect x="0.5" y="0.5" width="15" height="15" fill="#F4F4F4" strokeWidth="1" stroke="#D4D4D4" key="0"/>,
                <path d="M3 6 L6.5 10.5 L13 5" strokeWidth="3" stroke="#D4D4D4" fill="none" key="1"/>
            ];
        if (!checked && disabled)
            content = <rect x="0.5" y="0.5" width="15" height="15" fill="#F4F4F4" strokeWidth="1" stroke="#D4D4D4"/>;

        return (
            <svg width="16" height="16" style={{position: 'absolute',marginLeft: -20,marginTop: 2, borderRadius: 2}}>
                {content}
            </svg>
        )
    }

}

export default Checkbox;
