import React from 'react';
import _ from 'lodash';

import prefixName from '../prefix-name';
import {canSwitchNumber} from '../tools';

class Select extends React.Component {

    static propTypes = {
        options: React.PropTypes.oneOfType([React.PropTypes.array, React.PropTypes.object]),
        value: React.PropTypes.any,
        placeholder: React.PropTypes.string,
        disabled: React.PropTypes.bool,
        numberValue: React.PropTypes.bool,
        onChange: React.PropTypes.func
    };

    static defaultProps = {
        options: {},
        numberValue: true,
        value: '',
        placeholder: '',
        disabled: false,
        onChange: function () {
        }
    };

    state = {
        value: this.props.value
    };

    componentWillMount() {
        this._formatOptions();
    }

    componentWillReceiveProps(nextProps) {
        if (this.props.options !== nextProps.options) {
            this._formatOptions(nextProps.options);
        }
        this.setState({
            value: nextProps.value
        })
    }

    _formatOptions(options = this.props.options) {
        if (_.isArray(options)) {
            this.options = options;
        } else if (_.isObject(options)) {
            this.options = [];
            Object.keys(options).forEach(d=> {
                this.options.push({
                    value: d,
                    label: options[d]
                })
            })
        }
    }

    _handleChange(event) {
        let value = event.target.value;
        if (this.props.numberValue && canSwitchNumber(value))
            value = +value;
        this.setState({
            value: value
        });
        this.props.onChange.call(this, value, event);
    }

    render() {
        return (
            <select className={`${prefixName}-form-control`} disabled={this.props.disabled}
                    value={this.state.value}
                    onChange={this._handleChange.bind(this)}>
                {this._renderPlaceHolder()}
                {this._renderOptions()}
            </select>
        )
    }

    _renderPlaceHolder() {
        let flag = false;
        this.options.forEach(d => {
            if (String(d.value) === String(this.state.value))
                flag = true;
        });
        if (!flag) {
            return <option value="">{this.props.placeholder}</option>
        } else {
            return null
        }
    }

    _renderOptions() {
        return this.options.map(item => (
            <option value={item.value}
                    key={item.value}>
                {item.label}
            </option>
        ))
    }

}

export default Select;
