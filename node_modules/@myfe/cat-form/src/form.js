import React, { Component } from 'react';
import request from 'superagent';
import _ from 'lodash';
import { superagentLoading } from '@myfe/cat-loading';
import Button from '@myfe/cat-button'
import FormControl from './formcontrol';

import prefixName from './prefix-name';

class Form extends Component {

    static propTypes = {
        data: React.PropTypes.object.isRequired,
        showValidation: React.PropTypes.bool,
        layout: React.PropTypes.oneOf(['aligned', 'double', 'inline', '0', '1', '2', '3', '4', 0, 1, 2, 3, 4]),
        labelWidth: React.PropTypes.oneOfType([
            React.PropTypes.number,
            React.PropTypes.string
        ]),
        size: React.PropTypes.oneOf(['small', 'normal', 'large']),
        onChange: React.PropTypes.func,
        onValidate: React.PropTypes.func,
        onSubmit: React.PropTypes.func,
        method: React.PropTypes.oneOf(['get', 'put', 'post', 'delete', 'head']),
        action: React.PropTypes.string,
        enctype: React.PropTypes.string,
        pretreat: React.PropTypes.func
    };

    static defaultProps = {
        layout: 1,
        labelWidth: 6,
        size: 'normal',
        onChange: () => {},
        onValidate: () => {},
        onSubmit: () => {},
        method: 'post',
        action: '',
        enctype: 'application/x-www-form-urlencoded'
    };

    state = {
        data: this.props.data || {},
        showValidation: !!this.props.showValidation //是否显示非空验证
    };

    validateMap = {};
    event = {};

    submit(options = {}) {
        return new Promise((resolve, reject)=> {
            let action = options.action || this.props.action;

            if (!this.validate()
                || this.props.onSubmit.call(this, this.state.data) === false
                || !action)
                return;


            let method = options.method || this.props.method,
                type = options.enctype || this.props.enctype,
                pretreat = options.pretreat || this.props.pretreat,
                data = _.isFunction(pretreat) ? pretreat(_.cloneDeep(this.state.data)) : this.state.data;

            request(method, action)
                .type(type)
                .query(['put', 'post', 'delete'].indexOf(method.toLowerCase()) === -1 ? data : '')
                .send(data)
                .use(superagentLoading())
                .end((err, res)=> {
                    if (err) {
                        reject(err, res);
                        return;
                    }
                    resolve(res.body, res);
                })
        })

    }

    _keyPressHandler(event) {
        if (_.indexOf(['input', 'select'], event.target.tagName.toLowerCase()) !== -1
            && !event.altKey
            && !event.metaKey
            && !event.ctrlKey
            && !event.shiftKey
            && event.which === 13) {
            this.submit();
        }
    }

    getData(arr) {
        if (arr) {
            return _.pick(this.state.data, arr);
        }
        return this.state.data;
    }

    /**
     *
     * @param data
     * @param flag 是否完全替换
     */
    setData(data = {}) {
        this.validateMap = {};
        this.event = {};
        this.setState({
            data: _.assign(this.state.data, data)
        });
    }

    reset() {
        this.event = { type: 'form-reset' };
        this.setState({
            showValidation: false
        })
    }

    validate() {
        this.setState({
            showValidation: true
        });

        let flag = true;
        Object.keys(this.validateMap).forEach(d => {
            flag = flag && this.validateMap[d];
        });

        let res = this.props.onValidate.call(this, flag);

        return _.isBoolean(res) ? res : flag;
    }

    _onChange(event) {
        this.event = event;
        let change = event.type === 'change';
        this.state.data[event.name] = event.value;
        this.validateMap[event.name] = event.validation;

        if (change) {
            this._changeHandler();
        }
    };

    _changeHandler = _.throttle(()=> {
        let flag = true;
        Object.keys(this.validateMap).forEach(d => {
            flag = flag && this.validateMap[d];
        });
        this.props.onChange.call(this, {
            target: this.event.name,
            data: this.state.data,
            validation: flag,
            validateMap: _.cloneDeep(this.validateMap)
        });
        this.forceUpdate();
    }, 200);

    componentWillMount() {
        this._formatLayout()
    }

    componentWillReceiveProps(nextProps) {
        if (this.state.data !== nextProps.data) {
            this.validateMap = {};
            this.event = {};
            this.state.showValidation = false;
        }
        this.setState({
            data: nextProps.data || this.state.data,
            showValidation: _.isUndefined(nextProps.showValidation)
                            ? this.state.showValidation
                            : nextProps.showValidation
        })
    }

    render() {
        let className = `${prefixName}-form-horizontal ${prefixName}-clearfix`;

        return (
            <div className={className} onKeyPress={this._keyPressHandler.bind(this)}>
                {this._renderChildren(this.props.children)}
            </div>
        );
    }

    _renderChildren(children) {
        return React.Children.map(children, child => {
            if (child && child.type === FormControl) {
                let props = {
                    _onChange: this._onChange.bind(this),
                    data: this.state.data,
                    value: _.clone(this.state.data[child.props.name]),
                    validation: this.validateMap[child.props.name],
                    showValidation: this.state.showValidation,
                    size: this.props.size,
                    event: this.event
                };
                if (_.isUndefined(child.props.layout)) {
                    props.layout = this.layout;
                }
                if (_.isUndefined(child.props.labelWidth)) {
                    props.labelWidth = this.props.labelWidth;
                }
                return React.cloneElement(child, props);

            }  else if (child && child.type === Button
                && child.props.type === 'submit'
                && _.isUndefined(child.props.onClick)) {
                return React.cloneElement(child, {onClick: this.submit.bind(this)})

            } else if (child && child.type === Button
                && child.props.type === 'reset'
                && _.isUndefined(child.props.onClick)) {
                return React.cloneElement(child, {onClick: this.reset.bind(this)})

            } else if (child && child.props && child.props.children) {
                return React.cloneElement(child, {
                    children: this._renderChildren(child.props.children)
                });

            }else {
                return child;
            }
        })
    }

    _formatLayout() {
        this.layout = ({
            aligned: 1,
            double: 2,
            inline: 2,
            0: 2,
            1: 1,
            2: 2,
            3: 3,
            4: 4
        })[this.props.layout];
    }

}

export default Form;
